# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxSumBST(self, root: Optional[TreeNode]) -> int:
        #at each valid bst, return the sum of the keys of that bst as well as whether its a valid bst
        #if valid, compare ans with sum
        #parent will check if both children are, whether itself is, then compare its sum with ans etc
        
        #a bst should return its max and min value in case its used as a left or right subtree of another bst
        #True, min, max, sum
        #False,none,none,none
        
        ans = 0
        def rec(node):
            nonlocal ans
            if not node:
                return (True,float('inf'),float('-inf'),0)
            
            left = rec(node.left)
            right = rec(node.right)
            if not(left[0] and right[0]):
                return (False,float('inf'),float('-inf'),0)
            if not(node.val > left[2] and node.val < right[1]):
                return (False,float('inf'),float('-inf'),0)
            cursum = left[3] + right[3] + node.val
            ans = max(ans, cursum)
            return (True, min(left[1], right[1], node.val), max(left[2], right[2], node.val), cursum)
        rec(root)
        return ans
                
